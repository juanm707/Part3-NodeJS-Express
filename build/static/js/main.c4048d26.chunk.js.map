{"version":3,"sources":["components/Note.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","axios","get","then","response","data","newObject","post","id","put","Notification","message","Footer","style","color","fontStyle","fontSize","App","props","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","error","setError","useEffect","noteService","initialNotes","console","log","length","notesToShow","filter","map","key","find","n","changeNote","returnedNote","catch","setTimeout","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"kNAaeA,EAXF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACZC,EAAQF,EAAKG,UAAY,qBAAuB,iBACtD,OACI,wBAAIC,UAAU,QACTJ,EAAKK,QACN,4BAAQC,QAASL,GAAmBC,K,gBCsBjC,EAzBA,WAYX,OAXgBK,IAAMC,IAHV,cAcGC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAa9B,EAVA,SAAAC,GAEX,OADgBL,IAAMM,KAlBV,aAkBwBD,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ9B,EALA,SAACG,EAAIF,GAEhB,OADgBL,IAAMQ,IAAN,UAvBJ,aAuBI,YAAwBD,GAAMF,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCtBvCK,EAAe,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpB,OAAgB,OAAZA,EACO,KAIT,yBAAKb,UAAU,SACVa,IAKLC,EAAS,WAOX,OACI,yBAAKC,MAPW,CAChBC,MAAO,QACPC,UAAW,SACXC,SAAU,KAKN,6BACA,mHAsHGC,EAjHH,SAACC,GAAW,IAAD,EACOC,mBAAS,IADhB,mBACZC,EADY,KACLC,EADK,OAEWF,mBAAS,iBAFpB,mBAEZG,EAFY,KAEHC,EAFG,OAGWJ,oBAAS,GAHpB,mBAGZK,EAHY,KAGHC,EAHG,OAION,mBAAS,MAJhB,mBAIZO,EAJY,KAILC,EAJK,KAMnBC,qBAAU,WACPC,IAEK1B,MAAK,SAAA2B,GACFT,EAASS,QAEjB,IAcHC,QAAQC,IAAI,SAAUZ,EAAMa,OAAQ,SAEpC,IAyDMC,EAAcV,EAAUJ,EAAQA,EAAMe,QAAO,SAAAzC,GAAI,OAAIA,EAAKG,aAEhE,OACI,6BACI,kBAAC,EAAD,CAAcc,QAASe,IACvB,qCACA,6BACI,4BAAQ1B,QAAS,kBAAMyB,GAAYD,KAAnC,QACUA,EAAU,YAAc,QAGtC,4BACKU,EAAYE,KAAI,SAAA1C,GAAI,OACjB,kBAAC,EAAD,CAAM2C,IAAK3C,EAAKc,GACVd,KAAMA,EACNC,iBAAkB,kBAtCf,SAACa,GAEtB,IAAMd,EAAO0B,EAAMkB,MAAK,SAAAC,GAAC,OAAIA,EAAE/B,KAAOA,KAChCgC,EAAU,2BAAO9C,GAAP,IAAaG,WAAYH,EAAKG,YAE9CgC,EACYrB,EAAIgC,GACXrC,MAAK,SAAAsC,GACFpB,EAASD,EAAMgB,KAAI,SAAA1C,GAAI,OAAIA,EAAKc,KAAOA,EAAKd,EAAO+C,SAEtDC,OAAM,SAAAhB,GAGHC,EAAS,SAAD,OACGjC,EAAKK,QADR,0CAGR4C,YAAW,WACPhB,EAAS,QACV,KACHN,EAASD,EAAMe,QAAO,SAAAI,GAAC,OAAIA,EAAE/B,KAAOA,SAmBFb,CAAiBD,EAAKc,WAI5D,0BAAMoC,SAtEE,SAACC,GACbA,EAAMC,iBAEN,IAAMC,EAAa,CACfvC,GAAKY,EAAMa,OAAS,EACpBlC,QAASuB,EACT0B,MAAM,IAAIC,MAAOC,cACjBrD,UAAWsD,KAAKC,SAAW,IAa/BvB,EACYkB,GACP5C,MAAK,SAAAsC,GACFpB,EAASD,EAAMiC,OAAOZ,IACtBlB,EAAW,SA+CX,2BAAO+B,MAAOhC,EAASiC,SA7EV,SAACV,GACtBd,QAAQC,IAAIa,EAAMW,OAAOF,OACzB/B,EAAWsB,EAAMW,OAAOF,UA4EhB,4BAAQG,KAAK,UAAb,SAEJ,kBAAC,EAAD,Q,MCtIZC,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.c4048d26.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Note = ({ note, toggleImportance }) => {\n    const label = note.important ? 'make not important' : 'make important';\n    return (\n        <li className='note'>\n            {note.content}\n            <button onClick={toggleImportance}>{label}</button>\n        </li>\n    );\n}\n\n\nexport default Note;","import axios from 'axios';\n\nconst baseUrl = '/api/notes' //'https://floating-ravine-98366.herokuapp.com/api/notes' //http://localhost:3001/api/notes';\n\nconst getAll = () => {\n    const request = axios.get(baseUrl);\n    // return request.then(response => response.data);\n\n    // const nonExisting = {\n    //     id: 10000,\n    //     content: 'This note is not saved to server',\n    //     date: '2019-05-30T17:30:31.908Z',\n    //     important: true,\n    // }\n\n    //return request.then(response => response.data.concat(nonExisting));\n    return request.then(response => response.data);\n}\n\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject);\n    return request.then(response => response.data);\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject);\n    return request.then(response => response.data);\n}\n\nexport default { getAll, create, update }","import React, { useState, useEffect } from 'react';\nimport Note from './components/Note';\nimport noteService from './services/notes';\n\nconst Notification = ({ message }) => {\n    if (message === null) {\n        return null;\n    }\n\n    return (\n      <div className='error'>\n          {message}\n      </div>\n    );\n}\n\nconst Footer = () => {\n    const footerStyle = {\n        color: 'green',\n        fontStyle: 'italic',\n        fontSize: 16\n    };\n\n    return (\n        <div style={footerStyle}>\n            <br/>\n            <em>Note app, Tutorial by Department of Computer Science, University of Helsinki 2020</em>\n        </div>\n    );\n}\n\nconst App = (props) => {\n    const [notes, setNotes] = useState([]);\n    const [newNote, setNewNote] = useState('a new note...');\n    const [showAll, setShowAll] = useState(true);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n       noteService\n           .getAll()\n           .then(initialNotes => {\n               setNotes(initialNotes);\n           });\n    }, []);\n\n    // const hook = () => {\n    //     console.log('effect');\n    //     axios\n    //         .get('http://localhost:3001/notes')\n    //         .then(response => {\n    //             console.log('promise fulfilled');\n    //             setNotes(response.data);\n    //         });\n    // };\n    //\n    // useEffect(hook, []);\n\n    console.log('render', notes.length, 'notes');\n\n    const handleNoteChange = (event) => {\n        console.log(event.target.value);\n        setNewNote(event.target.value);\n    }\n\n    // event handler\n    const addNote = (event) => {\n        event.preventDefault();\n        //console.log('button clicked', event.target);\n        const noteObject = {\n            id:  notes.length + 1,\n            content: newNote,\n            date: new Date().toISOString(),\n            important: Math.random() < 0.5\n        }\n\n        // // setNotes(notes.concat(noteObject));\n        // // setNewNote('');\n        //\n        // axios\n        //     .post('http://localhost:3001/notes', noteObject)\n        //     .then(response => {\n        //         setNotes(notes.concat(response.data));\n        //         setNewNote('');\n        //     });\n\n        noteService\n            .create(noteObject)\n            .then(returnedNote => {\n                setNotes(notes.concat(returnedNote));\n                setNewNote('');\n            })\n    }\n\n    const toggleImportance = (id) => {\n        //console.log('importance of', id, 'needs to be toggled');\n        const note = notes.find(n => n.id === id);\n        const changeNote = {...note, important: !note.important};\n\n        noteService\n            .update(id, changeNote)\n            .then(returnedNote => {\n                setNotes(notes.map(note => note.id !== id ? note : returnedNote));\n            })\n            .catch(error => {\n                //alert(`the note ${note.content} was already deleted from server`);\n                //setError(`the note '${note.content}' was already deleted from server`);\n                setError(\n                  `Note '${note.content}' was already removed from the server`\n                );\n                setTimeout(() => {\n                    setError(null)\n                }, 5000);\n                setNotes(notes.filter(n => n.id !== id));\n            })\n    }\n\n    const notesToShow = showAll ? notes : notes.filter(note => note.important);\n\n    return (\n        <div>\n            <Notification message={error} />\n            <h1>Notes</h1>\n            <div>\n                <button onClick={() => setShowAll(!showAll)}>\n                    show {showAll ? 'important' : 'all'}\n                </button>\n            </div>\n            <ul>\n                {notesToShow.map(note =>\n                    <Note key={note.id}\n                          note={note}\n                          toggleImportance={() => toggleImportance(note.id)}\n                    />\n                )}\n            </ul>\n            <form onSubmit={addNote}>\n                <input value={newNote} onChange={handleNoteChange}/>\n                <button type=\"submit\">Save</button>\n            </form>\n            <Footer />\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css'\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n)"],"sourceRoot":""}